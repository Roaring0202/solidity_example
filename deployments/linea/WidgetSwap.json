{
  "address": "0x6Ba1eb44B96e0F5e22a43611D9F65110a394247D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateRouterETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes2",
          "name": "partnerId",
          "type": "bytes2"
        }
      ],
      "name": "PartnerSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes2",
          "name": "partnerId",
          "type": "bytes2"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tenthBps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "widgetFee",
          "type": "uint256"
        }
      ],
      "name": "WidgetSwapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TENTH_BPS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2",
          "name": "_partnerId",
          "type": "bytes2"
        }
      ],
      "name": "partnerSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateFactory",
      "outputs": [
        {
          "internalType": "contract IStargateFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateRouter",
      "outputs": [
        {
          "internalType": "contract IStargateRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateRouterETH",
      "outputs": [
        {
          "internalType": "contract IStargateRouterETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "bytes2",
          "name": "_partnerId",
          "type": "bytes2"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tenthBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            }
          ],
          "internalType": "struct IStargateWidget.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "swapETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_srcPoolId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_dstPoolId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountLD",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dstGasForCall",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dstNativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "dstNativeAddr",
              "type": "bytes"
            }
          ],
          "internalType": "struct IStargateRouter.lzTxObj",
          "name": "_lzTxParams",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_to",
          "type": "bytes"
        },
        {
          "internalType": "bytes2",
          "name": "_partnerId",
          "type": "bytes2"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tenthBps",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            }
          ],
          "internalType": "struct IStargateWidget.FeeObj",
          "name": "_feeObj",
          "type": "tuple"
        }
      ],
      "name": "swapTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x906b240cae534076ddb0e6781a4dddb0ae5658c9f95e6772a725425bd6d91134",
  "receipt": {
    "to": null,
    "from": "0xf369c8b1CA5810B81AaC3f037C8b18Bf27cDb2D2",
    "contractAddress": "0x6Ba1eb44B96e0F5e22a43611D9F65110a394247D",
    "transactionIndex": 3,
    "gasUsed": "1070256",
    "logsBloom": "0x
    "blockHash": "0xdeb2ef0da821cf9ccf55385a552f1ea911b3275361e9c65daf3c1326ab9fbc85",
    "transactionHash": "0x906b240cae534076ddb0e6781a4dddb0ae5658c9f95e6772a725425bd6d91134",
    "logs": [],
    "blockNumber": 213189,
    "cumulativeGasUsed": "1401575",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2F6F07CDcf3588944Bf4C42aC74ff24bF56e7590",
    "0x8731d54E9D02c286767d56ac03e8037C07e01e98",
    "0xAF54BE5B6eEc24d6BFACf1cce4eaF680A8239398"
  ],
  "numDeployments": 1,
  "solcInputHash": "0c462b8e33b6257eabe1c64065f9bcbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateRouterETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"}],\"name\":\"PartnerSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes2\",\"name\":\"partnerId\",\"type\":\"bytes2\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tenthBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"widgetFee\",\"type\":\"uint256\"}],\"name\":\"WidgetSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENTH_BPS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2\",\"name\":\"_partnerId\",\"type\":\"bytes2\"}],\"name\":\"partnerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateFactory\",\"outputs\":[{\"internalType\":\"contract IStargateFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouter\",\"outputs\":[{\"internalType\":\"contract IStargateRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateRouterETH\",\"outputs\":[{\"internalType\":\"contract IStargateRouterETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes2\",\"name\":\"_partnerId\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tenthBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"internalType\":\"struct IStargateWidget.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"swapETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_srcPoolId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_dstPoolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountLD\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dstGasForCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dstNativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dstNativeAddr\",\"type\":\"bytes\"}],\"internalType\":\"struct IStargateRouter.lzTxObj\",\"name\":\"_lzTxParams\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_to\",\"type\":\"bytes\"},{\"internalType\":\"bytes2\",\"name\":\"_partnerId\",\"type\":\"bytes2\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tenthBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"}],\"internalType\":\"struct IStargateWidget.FeeObj\",\"name\":\"_feeObj\",\"type\":\"tuple\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stargate/WidgetSwap.sol\":\"WidgetSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IStargatePool.sol\\\";\\n\\ninterface IStargateFactory {\\n    function getPool(uint256 _srcPoolId) external returns (IStargatePool);\\n}\\n\",\"keccak256\":\"0x0320af3b5e2a0cb00d90a364fdc72913344e79c3e27f0333c7b84ba518d6c081\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargatePool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\ninterface IStargatePool {\\n    function token() external returns (address);\\n}\\n\",\"keccak256\":\"0xb9c96cfcba96529645ffa963cb19792242904f91e3e7d6b050258890a1328db8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStargateRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n\\n    function addLiquidity(\\n        uint256 _poolId,\\n        uint256 _amountLD,\\n        address _to\\n    ) external;\\n\\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n\\n    function redeemRemote(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function instantRedeemLocal(\\n        uint16 _srcPoolId,\\n        uint256 _amountLP,\\n        address _to\\n    ) external returns (uint256);\\n\\n    function redeemLocal(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLP,\\n        bytes calldata _to,\\n        lzTxObj memory _lzTxParams\\n    ) external payable;\\n\\n    function sendCredits(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress\\n    ) external payable;\\n\\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x68a2773e7853ba51d5bb136e9447c9e5b31ec27c38e46861a5956b34e0612c1d\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateRouterETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\ninterface IStargateRouterETH {\\n    function addLiquidityETH() external payable;\\n\\n    function swapETH(\\n        uint16 dstChainId,\\n        address payable refundAddress,\\n        bytes calldata to,\\n        uint256 amountLD,\\n        uint256 minAmountLD\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x27092f411f14b3da75937addbf9d15381d10bf892095abc936761e31508cd1ee\",\"license\":\"MIT\"},\"contracts/interfaces/IStargateWidget.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IStargateRouter.sol\\\";\\n\\ninterface IStargateWidget {\\n    struct FeeObj {\\n        uint256 tenthBps; // bps is to an extra decimal place\\n        address feeCollector;\\n    }\\n\\n    event WidgetSwapped(bytes2 indexed partnerId, uint256 tenthBps, uint256 widgetFee);\\n    event PartnerSwap(bytes2 indexed partnerId);\\n\\n    function partnerSwap(bytes2 _partnerId) external;\\n\\n    function swapTokens(\\n        uint16 _dstChainId,\\n        uint16 _srcPoolId,\\n        uint16 _dstPoolId,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj calldata _lzTxParams,\\n        bytes calldata _to,\\n        bytes2 _partnerId,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n\\n\\n    function swapETH(\\n        uint16 _dstChainId,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        bytes2 _partnerId,\\n        FeeObj calldata _feeObj\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa90c5882bb69970a6fd4ecc825527a5cb376601fca72101e61029e56e86d8390\",\"license\":\"MIT\"},\"contracts/stargate/WidgetSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IStargateRouter.sol\\\";\\nimport \\\"../interfaces/IStargateRouterETH.sol\\\";\\nimport \\\"../interfaces/IStargateFactory.sol\\\";\\nimport \\\"../interfaces/IStargateWidget.sol\\\";\\n\\ncontract WidgetSwap is ReentrancyGuard, IStargateWidget {\\n    using SafeERC20 for IERC20;\\n\\n    IStargateRouter public immutable stargateRouter;\\n    IStargateRouterETH public immutable stargateRouterETH;\\n    IStargateFactory public immutable stargateFactory;\\n    uint256 public constant TENTH_BPS_DENOMINATOR = 100000;\\n    uint256 public constant MAX_UINT = 2**256 - 1;\\n    mapping(address => bool) public tokenApproved;\\n\\n    constructor(address _stargateRouter, address _stargateRouterETH, address _stargateFactory) {\\n        stargateRouter = IStargateRouter(_stargateRouter);\\n        stargateRouterETH = IStargateRouterETH(_stargateRouterETH);\\n        stargateFactory = IStargateFactory(_stargateFactory);\\n    }\\n\\n    // allow anyone to emit this msg alongside their stargate tx so they can get credited for their referral\\n    // to get credit this event must be emitted in the same tx as a stargate swap event\\n    function partnerSwap(bytes2 _partnerId) external override {\\n        emit PartnerSwap(_partnerId);\\n    }\\n\\n    function swapTokens(\\n        uint16 _dstChainId,\\n        uint16 _srcPoolId,\\n        uint16 _dstPoolId,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        IStargateRouter.lzTxObj calldata _lzTxParams,\\n        bytes calldata _to,\\n        bytes2 _partnerId,\\n        FeeObj calldata _feeObj\\n    ) external override nonReentrant payable {\\n        uint256 widgetFee = _getAndPayWidgetFee(_srcPoolId, _amountLD, _feeObj);\\n\\n        stargateRouter.swap{value:msg.value}(\\n            _dstChainId,\\n            _srcPoolId,\\n            _dstPoolId,\\n            payable(msg.sender),\\n            _amountLD - widgetFee,\\n            _minAmountLD,\\n            _lzTxParams,\\n            _to,\\n            \\\"0x\\\"\\n        );\\n\\n        emit WidgetSwapped(_partnerId, _feeObj.tenthBps, widgetFee);\\n    }\\n\\n    function swapETH(\\n        uint16 _dstChainId,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        bytes calldata _to,\\n        bytes2 _partnerId,\\n        FeeObj calldata _feeObj\\n    ) external override nonReentrant payable {\\n        // allows us to deploy same contract on non eth chains\\n        require(address(stargateRouterETH) != address(0x0), \\\"WidgetSwap: func not available\\\");\\n\\n        uint256 widgetFee = _getAndPayWidgetFeeETH(_amountLD, _feeObj);\\n\\n        // \\\"value:\\\" contains the amount of eth to swap and the stargate/layerZero fees, minus the widget fee\\n        stargateRouterETH.swapETH{value:msg.value - widgetFee}(\\n            _dstChainId,\\n            payable(msg.sender),\\n            _to,\\n            _amountLD - widgetFee,\\n            _minAmountLD\\n        );\\n\\n        emit WidgetSwapped(_partnerId, _feeObj.tenthBps, widgetFee);\\n    }\\n\\n\\n    function _getAndPayWidgetFee(\\n        uint16 _srcPoolId,\\n        uint256 _amountLD,\\n        FeeObj calldata _feeObj\\n    ) internal returns (uint256 widgetFee) {\\n        // corresponding token to the poolId\\n        address token = stargateFactory.getPool(_srcPoolId).token();\\n\\n        // move all the tokens to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amountLD);\\n\\n        // calculate the widgetFee\\n        widgetFee = _amountLD * _feeObj.tenthBps / TENTH_BPS_DENOMINATOR;\\n\\n        // pay the widget fee\\n        IERC20(token).safeTransfer(_feeObj.feeCollector, widgetFee);\\n\\n        // only call max approval once\\n        if (!tokenApproved[token]) {\\n            tokenApproved[token] = true;\\n            // allow stargateRouter to spend the tokens to be transferred\\n            IERC20(token).safeApprove(address(stargateRouter), MAX_UINT);\\n        }\\n\\n        return widgetFee;\\n    }\\n\\n    function _getAndPayWidgetFeeETH(\\n        uint256 _amountLD,\\n        FeeObj calldata _feeObj\\n    ) internal returns (uint256 widgetFee) {\\n        // calculate the widgetFee\\n        widgetFee = _amountLD * _feeObj.tenthBps / TENTH_BPS_DENOMINATOR;\\n        require(msg.value > widgetFee, \\\"WidgetSwap: not enough eth for widgetFee\\\");\\n\\n        // verify theres enough eth to cover the amount to swap\\n        require(msg.value - widgetFee > _amountLD, \\\"WidgetSwap: not enough eth for swap\\\");\\n\\n        // pay the widget fee\\n        (bool success, ) = _feeObj.feeCollector.call{value: widgetFee}(\\\"\\\");\\n        require(success, \\\"WidgetSwap: failed to transfer widgetFee\\\");\\n\\n        return widgetFee;\\n    }\\n}\",\"keccak256\":\"0x28993c5ad5261d0b08e785232e7ace43371b365fafdc43b9fe164577292d7c93\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161130738038061130783398101604081905261002f91610077565b60016000556001600160601b0319606093841b811660805291831b821660a05290911b1660c0526100b9565b80516001600160a01b038116811461007257600080fd5b919050565b60008060006060848603121561008b578283fd5b6100948461005b565b92506100a26020850161005b565b91506100b06040850161005b565b90509250925092565b60805160601c60a05160601c60c05160601c6111f46101136000396000818160f701526105550152600081816101430152818161032001526103b10152600081816101aa0152818161022001526106e501526111f46000f3fe6080604052600436106100865760003560e01c8063919d763711610059578063919d763714610165578063a87376e914610178578063a9e56f3c14610198578063beaeb55a146101cc578063e5b5019a146101f157600080fd5b8063170e2b8a1461008b5780632d62fc1a146100d057806330e7a49b146100e55780638e0f64d314610131575b600080fd5b34801561009757600080fd5b506100bb6100a6366004610d78565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100e36100de366004610df1565b610207565b005b3480156100f157600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c7565b34801561013d57600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b6100e3610173366004610ec8565b610316565b34801561018457600080fd5b506100e3610193366004610dd7565b61049d565b3480156101a457600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b3480156101d857600080fd5b506101e3620186a081565b6040519081526020016100c7565b3480156101fd57600080fd5b506101e360001981565b61020f6104d5565b600061021c8a898461052f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fbf10fc348d8d8d33878f61025e919061114d565b8e8e8e8e6040518b63ffffffff1660e01b815260040161028699989796959493929190611024565b6000604051808303818588803b15801561029f57600080fd5b505af11580156102b3573d6000803e3d6000fd5b50506040805186358152602081018690526001600160f01b0319881694507fe005092a469280dafcad91e38921cc6f96eac91d73413489fd8719634163345e935001905060405180910390a25061030a6001600055565b50505050505050505050565b61031e6104d5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103995760405162461bcd60e51b815260206004820152601e60248201527f576964676574537761703a2066756e63206e6f7420617661696c61626c65000060448201526064015b60405180910390fd5b60006103a58783610714565b90506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631114cd2a6103e0833461114d565b8a3389896103ee888f61114d565b8d6040518863ffffffff1660e01b815260040161041096959493929190610fe0565b6000604051808303818588803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b50506040805186358152602081018690526001600160f01b0319881694507fe005092a469280dafcad91e38921cc6f96eac91d73413489fd8719634163345e935001905060405180910390a2506104946001600055565b50505050505050565b6040516001600160f01b03198216907f85ce809fd9fd62b920fadc9d3a3a8e642d3969bf635276bfbdde866acce409fc90600090a250565b600260005414156105285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610390565b6002600055565b60405163068bcd8d60e01b815261ffff8416600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063068bcd8d90602401602060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190610d9b565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561060b57600080fd5b505af115801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190610d9b565b905061065a6001600160a01b0382163330876108bf565b620186a061066984358661112e565b610673919061110e565b91506106996106886040850160208601610d78565b6001600160a01b0383169084610930565b6001600160a01b03811660009081526001602052604090205460ff1661070c576001600160a01b0381166000818152600160208190526040909120805460ff1916909117905561070c907f0000000000000000000000000000000000000000000000000000000000000000600019610965565b509392505050565b6000620186a061072583358561112e565b61072f919061110e565b90508034116107915760405162461bcd60e51b815260206004820152602860248201527f576964676574537761703a206e6f7420656e6f7567682065746820666f722077604482015267696467657446656560c01b6064820152608401610390565b8261079c823461114d565b116107f55760405162461bcd60e51b815260206004820152602360248201527f576964676574537761703a206e6f7420656e6f7567682065746820666f72207360448201526207761760ec1b6064820152608401610390565b60006108076040840160208501610d78565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b50509050806108b85760405162461bcd60e51b815260206004820152602860248201527f576964676574537761703a206661696c656420746f207472616e736665722077604482015267696467657446656560c01b6064820152608401610390565b5092915050565b6040516001600160a01b038085166024830152831660448201526064810182905261092a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a89565b50505050565b6040516001600160a01b03831660248201526044810182905261096090849063a9059cbb60e01b906064016108f3565b505050565b8015806109ee5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156109b457600080fd5b505afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190610f50565b155b610a595760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610390565b6040516001600160a01b03831660248201526044810182905261096090849063095ea7b360e01b906064016108f3565b6000610ade826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b5e9092919063ffffffff16565b9050805160001480610aff575080806020019051810190610aff9190610db7565b6109605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610390565b6060610b6d8484600085610b75565b949350505050565b606082471015610bd65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610390565b600080866001600160a01b03168587604051610bf29190610f91565b60006040518083038185875af1925050503d8060008114610c2f576040519150601f19603f3d011682016040523d82523d6000602084013e610c34565b606091505b5091509150610c4587838387610c50565b979650505050505050565b60608315610cbc578251610cb5576001600160a01b0385163b610cb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610390565b5081610b6d565b610b6d8383815115610cd15781518083602001fd5b8060405162461bcd60e51b81526004016103909190610fad565b80356001600160f01b031981168114610d0357600080fd5b919050565b60008083601f840112610d19578182fd5b50813567ffffffffffffffff811115610d30578182fd5b602083019150836020828501011115610d4857600080fd5b9250929050565b600060408284031215610d60578081fd5b50919050565b803561ffff81168114610d0357600080fd5b600060208284031215610d89578081fd5b8135610d94816111a6565b9392505050565b600060208284031215610dac578081fd5b8151610d94816111a6565b600060208284031215610dc8578081fd5b81518015158114610d94578182fd5b600060208284031215610de8578081fd5b610d9482610ceb565b6000806000806000806000806000806101408b8d031215610e10578586fd5b610e198b610d66565b9950610e2760208c01610d66565b9850610e3560408c01610d66565b975060608b0135965060808b0135955060a08b013567ffffffffffffffff80821115610e5f578687fd5b908c01906060828f031215610e72578687fd5b90955060c08c01359080821115610e87578586fd5b50610e948d828e01610d08565b9095509350610ea7905060e08c01610ceb565b9150610eb78c6101008d01610d4f565b90509295989b9194979a5092959850565b600080600080600080600060e0888a031215610ee2578283fd5b610eeb88610d66565b96506020880135955060408801359450606088013567ffffffffffffffff811115610f14578384fd5b610f208a828b01610d08565b9095509350610f33905060808901610ceb565b9150610f428960a08a01610d4f565b905092959891949750929550565b600060208284031215610f61578081fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008251610fa3818460208701611164565b9190910192915050565b6020815260008251806020840152610fcc816040850160208701611164565b601f01601f19169190910160400192915050565b61ffff871681526001600160a01b038616602082015260a06040820181905260009061100f9083018688610f68565b60608301949094525060800152949350505050565b600061012061ffff808d168452808c166020850152808b1660408501525060018060a01b03891660608401528760808401528660a08401528060c08401528535818401525060208501356101408301526040850135601e1986360301811261108a578182fd5b8501803567ffffffffffffffff8111156110a2578283fd5b8036038713156110b0578283fd5b60606101608501526110ca61018085018260208501610f68565b91505082810360e08401526110e0818587610f68565b8381036101008501526002815261060f60f31b60208201529050604081019c9b505050505050505050505050565b60008261112957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561114857611148611190565b500290565b60008282101561115f5761115f611190565b500390565b60005b8381101561117f578181015183820152602001611167565b8381111561092a5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111bb57600080fd5b5056fea2646970667358221220d4ed8c9505deb9841c4760f2f47a392833ba7695f0184806e43ca55ae1b5f6ac64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063919d763711610059578063919d763714610165578063a87376e914610178578063a9e56f3c14610198578063beaeb55a146101cc578063e5b5019a146101f157600080fd5b8063170e2b8a1461008b5780632d62fc1a146100d057806330e7a49b146100e55780638e0f64d314610131575b600080fd5b34801561009757600080fd5b506100bb6100a6366004610d78565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100e36100de366004610df1565b610207565b005b3480156100f157600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c7565b34801561013d57600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b6100e3610173366004610ec8565b610316565b34801561018457600080fd5b506100e3610193366004610dd7565b61049d565b3480156101a457600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b3480156101d857600080fd5b506101e3620186a081565b6040519081526020016100c7565b3480156101fd57600080fd5b506101e360001981565b61020f6104d5565b600061021c8a898461052f565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639fbf10fc348d8d8d33878f61025e919061114d565b8e8e8e8e6040518b63ffffffff1660e01b815260040161028699989796959493929190611024565b6000604051808303818588803b15801561029f57600080fd5b505af11580156102b3573d6000803e3d6000fd5b50506040805186358152602081018690526001600160f01b0319881694507fe005092a469280dafcad91e38921cc6f96eac91d73413489fd8719634163345e935001905060405180910390a25061030a6001600055565b50505050505050505050565b61031e6104d5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103995760405162461bcd60e51b815260206004820152601e60248201527f576964676574537761703a2066756e63206e6f7420617661696c61626c65000060448201526064015b60405180910390fd5b60006103a58783610714565b90506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631114cd2a6103e0833461114d565b8a3389896103ee888f61114d565b8d6040518863ffffffff1660e01b815260040161041096959493929190610fe0565b6000604051808303818588803b15801561042957600080fd5b505af115801561043d573d6000803e3d6000fd5b50506040805186358152602081018690526001600160f01b0319881694507fe005092a469280dafcad91e38921cc6f96eac91d73413489fd8719634163345e935001905060405180910390a2506104946001600055565b50505050505050565b6040516001600160f01b03198216907f85ce809fd9fd62b920fadc9d3a3a8e642d3969bf635276bfbdde866acce409fc90600090a250565b600260005414156105285760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610390565b6002600055565b60405163068bcd8d60e01b815261ffff8416600482015260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063068bcd8d90602401602060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190610d9b565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561060b57600080fd5b505af115801561061f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190610d9b565b905061065a6001600160a01b0382163330876108bf565b620186a061066984358661112e565b610673919061110e565b91506106996106886040850160208601610d78565b6001600160a01b0383169084610930565b6001600160a01b03811660009081526001602052604090205460ff1661070c576001600160a01b0381166000818152600160208190526040909120805460ff1916909117905561070c907f0000000000000000000000000000000000000000000000000000000000000000600019610965565b509392505050565b6000620186a061072583358561112e565b61072f919061110e565b90508034116107915760405162461bcd60e51b815260206004820152602860248201527f576964676574537761703a206e6f7420656e6f7567682065746820666f722077604482015267696467657446656560c01b6064820152608401610390565b8261079c823461114d565b116107f55760405162461bcd60e51b815260206004820152602360248201527f576964676574537761703a206e6f7420656e6f7567682065746820666f72207360448201526207761760ec1b6064820152608401610390565b60006108076040840160208501610d78565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610851576040519150601f19603f3d011682016040523d82523d6000602084013e610856565b606091505b50509050806108b85760405162461bcd60e51b815260206004820152602860248201527f576964676574537761703a206661696c656420746f207472616e736665722077604482015267696467657446656560c01b6064820152608401610390565b5092915050565b6040516001600160a01b038085166024830152831660448201526064810182905261092a9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a89565b50505050565b6040516001600160a01b03831660248201526044810182905261096090849063a9059cbb60e01b906064016108f3565b505050565b8015806109ee5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156109b457600080fd5b505afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190610f50565b155b610a595760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610390565b6040516001600160a01b03831660248201526044810182905261096090849063095ea7b360e01b906064016108f3565b6000610ade826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b5e9092919063ffffffff16565b9050805160001480610aff575080806020019051810190610aff9190610db7565b6109605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610390565b6060610b6d8484600085610b75565b949350505050565b606082471015610bd65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610390565b600080866001600160a01b03168587604051610bf29190610f91565b60006040518083038185875af1925050503d8060008114610c2f576040519150601f19603f3d011682016040523d82523d6000602084013e610c34565b606091505b5091509150610c4587838387610c50565b979650505050505050565b60608315610cbc578251610cb5576001600160a01b0385163b610cb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610390565b5081610b6d565b610b6d8383815115610cd15781518083602001fd5b8060405162461bcd60e51b81526004016103909190610fad565b80356001600160f01b031981168114610d0357600080fd5b919050565b60008083601f840112610d19578182fd5b50813567ffffffffffffffff811115610d30578182fd5b602083019150836020828501011115610d4857600080fd5b9250929050565b600060408284031215610d60578081fd5b50919050565b803561ffff81168114610d0357600080fd5b600060208284031215610d89578081fd5b8135610d94816111a6565b9392505050565b600060208284031215610dac578081fd5b8151610d94816111a6565b600060208284031215610dc8578081fd5b81518015158114610d94578182fd5b600060208284031215610de8578081fd5b610d9482610ceb565b6000806000806000806000806000806101408b8d031215610e10578586fd5b610e198b610d66565b9950610e2760208c01610d66565b9850610e3560408c01610d66565b975060608b0135965060808b0135955060a08b013567ffffffffffffffff80821115610e5f578687fd5b908c01906060828f031215610e72578687fd5b90955060c08c01359080821115610e87578586fd5b50610e948d828e01610d08565b9095509350610ea7905060e08c01610ceb565b9150610eb78c6101008d01610d4f565b90509295989b9194979a5092959850565b600080600080600080600060e0888a031215610ee2578283fd5b610eeb88610d66565b96506020880135955060408801359450606088013567ffffffffffffffff811115610f14578384fd5b610f208a828b01610d08565b9095509350610f33905060808901610ceb565b9150610f428960a08a01610d4f565b905092959891949750929550565b600060208284031215610f61578081fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008251610fa3818460208701611164565b9190910192915050565b6020815260008251806020840152610fcc816040850160208701611164565b601f01601f19169190910160400192915050565b61ffff871681526001600160a01b038616602082015260a06040820181905260009061100f9083018688610f68565b60608301949094525060800152949350505050565b600061012061ffff808d168452808c166020850152808b1660408501525060018060a01b03891660608401528760808401528660a08401528060c08401528535818401525060208501356101408301526040850135601e1986360301811261108a578182fd5b8501803567ffffffffffffffff8111156110a2578283fd5b8036038713156110b0578283fd5b60606101608501526110ca61018085018260208501610f68565b91505082810360e08401526110e0818587610f68565b8381036101008501526002815261060f60f31b60208201529050604081019c9b505050505050505050505050565b60008261112957634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561114857611148611190565b500290565b60008282101561115f5761115f611190565b500390565b60005b8381101561117f578181015183820152602001611167565b8381111561092a5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146111bb57600080fd5b5056fea2646970667358221220d4ed8c9505deb9841c4760f2f47a392833ba7695f0184806e43ca55ae1b5f6ac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/stargate/WidgetSwap.sol:WidgetSwap",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1150,
        "contract": "contracts/stargate/WidgetSwap.sol:WidgetSwap",
        "label": "tokenApproved",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}